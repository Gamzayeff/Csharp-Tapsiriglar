
using System;
using System.Collections.Generic;
using System.Linq;

class Card
{
    public string PAN { get; set; }
    public string PIN { get; set; }
    public string CVC { get; set; }
    public string ExpireDate { get; set; }
    public decimal Balance { get; set; }
}

class User
{
    public string Name { get; set; }
    public string Surname { get; set; }
    public Card CreditCard { get; set; }
    public List<string> Transactions { get; set; } = new List<string>();
}

class Program
{
    static void Main(string[] args)
    {
        List<User> users = new List<User>
        {
            new User { Name = "Ali", Surname = "Hemzeyev", CreditCard = new Card { PAN = "1111111111111111", PIN = "1234", CVC = "123", ExpireDate = "06/22", Balance = 1000.0m } },
            new User { Name = "Mehemmed", Surname = "Hemzeyev", CreditCard = new Card { PAN = "2222222222222222", PIN = "5678", CVC = "456", ExpireDate = "08/23", Balance = 1500.0m } },
        };

        Console.WriteLine("Welcome to the ATM!");

        bool exit = false;
        User currentUser = null;

        while (!exit)
        {
            Console.Write("Please enter your PIN: ");
            string enteredPIN = Console.ReadLine();

            currentUser = users.FirstOrDefault(user => user.CreditCard.PIN == enteredPIN);

            if (currentUser != null)
            {
                Console.WriteLine($"Welcome, {currentUser.Name} {currentUser.Surname}!");
                while (true)
                {
                    Console.WriteLine("Please select an option:");
                    Console.WriteLine("1. Check Balance");
                    Console.WriteLine("2. Withdraw Cash");
                    Console.WriteLine("3. Transaction History");
                    Console.WriteLine("4. Transfer to Another Card");
                    Console.WriteLine("5. Exit");

                    int choice = Convert.ToInt32(Console.ReadLine());

                    switch (choice)
                    {
                        case 1:
                            Console.WriteLine($"Your balance is {currentUser.CreditCard.Balance:C}");
                            break;

                        case 2:
                            WithdrawCash(currentUser);
                            break;

                        case 3:
                            DisplayTransactionHistory(currentUser);
                            break;

                        case 4:
                            TransferToAnotherCard(users, currentUser);
                            break;

                        case 5:
                            exit = true;
                            break;

                        default:
                            Console.WriteLine("Invalid choice. Please select a valid option.");
                            break;
                    }

                    if (exit)
                    {
                        break;
                    }
                }
            }
            else
            {
                Console.WriteLine("Incorrect PIN. Please try again.");
            }
        }
    }

    static void WithdrawCash(User user)
    {
        Console.WriteLine("Select an amount to withdraw:");
        Console.WriteLine("1. 10 AZN");
        Console.WriteLine("2. 20 AZN");
        Console.WriteLine("3. 50 AZN");
        Console.WriteLine("4. 100 AZN");
        Console.WriteLine("5. Other");

        int choice = Convert.ToInt32(Console.ReadLine());

        decimal amount = 0;

        switch (choice)
        {
            case 1:
                amount = 10.0m;
                break;

            case 2:
                amount = 20.0m;
                break;

            case 3:
                amount = 50.0m;
                break;

            case 4:
                amount = 100.0m;
                break;

            case 5:
                Console.Write("Enter the amount to withdraw: ");
                if (!decimal.TryParse(Console.ReadLine(), out amount))
                {
                    Console.WriteLine("Invalid amount. Please enter a valid number.");
                    return;
                }
                break;

            default:
                Console.WriteLine("Invalid choice. Please select a valid option.");
                return;
        }

        try
        {
            if (user.CreditCard.Balance < amount)
            {
                throw new InsufficientBalanceException();
            }

            user.CreditCard.Balance -= amount;
            Console.WriteLine($"Withdrawn {amount:C} from your account.");
            user.Transactions.Add($"Withdrawn {amount:C}");
        }
        catch (InsufficientBalanceException)
        {
            Console.WriteLine("Insufficient balance. Please choose a lower amount.");
        }
    }

    static void DisplayTransactionHistory(User user)
    {
        Console.WriteLine("Transaction History:");
        foreach (string transaction in user.Transactions)
        {
            Console.WriteLine(transaction);
        }
    }

    static void TransferToAnotherCard(List<User> users, User sender)
    {
        Console.Write("Enter the recipient's PIN: ");
        string recipientPIN = Console.ReadLine();

        User recipient = users.FirstOrDefault(user => user.CreditCard.PIN == recipientPIN);

        if (recipient != null)
        {
            Console.Write("Enter the amount to transfer: ");
            decimal amount = 0;
            if (!decimal.TryParse(Console.ReadLine(), out amount))
            {
                Console.WriteLine("Invalid amount. Please enter a valid number.");
                return;
            }

            try
            {
                if (sender.CreditCard.Balance < amount)
                {
                    throw new InsufficientBalanceException();
                }

                sender.CreditCard.Balance -= amount;
                recipient.CreditCard.Balance += amount;

                Console.WriteLine($"Transferred {amount:C} to {recipient.Name} {recipient.Surname}'s account.");
                sender.Transactions.Add($"Transferred {amount:C} to {recipient.Name} {recipient.Surname}");
                recipient.Transactions.Add($"Received {amount:C} from {sender.Name} {sender.Surname}");
            }
            catch (InsufficientBalanceException)
            {
                Console.WriteLine("Insufficient balance for the transfer.");
            }
        }
        else
        {
            Console.WriteLine("Recipient with the provided PIN not found.");
        }
    }
}

class InsufficientBalanceException : Exception
{
    public InsufficientBalanceException() : base("Insufficient balance for the transaction.") { }
}